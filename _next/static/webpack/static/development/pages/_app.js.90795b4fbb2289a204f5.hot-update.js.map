{"version":3,"file":"static/webpack/static/development/pages/_app.js.90795b4fbb2289a204f5.hot-update.js","sources":["webpack:///./pages/_app/index.tsx"],"sourcesContent":["// #region Global Imports\nimport * as React from \"react\";\nimport App, { AppInitialProps, AppContext } from \"next/app\";\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"styled-components\";\nimport withRedux from \"next-redux-wrapper\";\nimport { Head } from \"next/document\";\n// #endregion Global Imports\n\n// #region Local Imports\nimport { theme } from \"@Definitions/Styled\";\nimport { AppWithStore } from \"@Interfaces\";\nimport { makeStore } from \"@Redux\";\n\nimport \"@Static/css/reset.scss\";\n// #endregion Local Imports\n\nclass WebApp extends App<AppWithStore> {\n    static async getInitialProps({\n        Component,\n        ctx,\n    }: AppContext): Promise<AppInitialProps> {\n        let pageProps = {};\n\n        // tell the client if the initial props still need to be fetched\n        let clientNeedsProps;\n\n        // check if we are inside a server-side export\n        const isExport = (!process.browser && !(ctx && ctx.req && ctx.req.headers));\n\n        if (isExport) {\n            // inside an export, the client needs props\n            // iff .getInitialProps is defined\n            clientNeedsProps = !!Component.getInitialProps;\n        } else {\n            // if not in an export, fetch props as normally\n            if (Component.getInitialProps)\n                pageProps = await Component.getInitialProps(ctx);\n            // and tell the client that it got all the props it needed\n            clientNeedsProps = false;\n        }\n\n        return { pageProps, clientNeedsProps };\n    }\n\n    state = { gotInitialProps: !this.props.clientNeedsProps };\n\n    async componentDidMount() {\n        // if we still need some properties, update the router\n        // which should call getInitialProps() and get them\n        if (this.props.clientNeedsProps) {\n            await Router.replace(Router.pathname + location.search);\n            this.setState({ gotInitialProps: true });\n        }\n    }\n\n    render() {\n        const { Component, pageProps, store } = this.props;\n\n        return (\n            <Provider store={store}>\n                <ThemeProvider theme={theme}>\n                    <Component {...pageProps} />\n                </ThemeProvider>\n            </Provider>\n        );\n    }\n}\n\nexport default withRedux(makeStore)(WebApp);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;AA4BA;AAAA;AAAA;AACA;;;;;;;;;;;AAIA;;;;;;AACA;AACA;;AAAA;AAAA;AAAA;AACA;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;AA/CA;AAGA;AACA;AAIA;AACA;AACA;AACA;;;;;AACA;AACA;AACA;;;;;AAGA;;;;;;AACA;AACA;;AADA;AACA;;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AA1BA;AACA;AAmDA;;;;A","sourceRoot":""}